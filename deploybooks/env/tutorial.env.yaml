- update_operations() {
    newline ;
    title Tutorial - Update Operations;
    newline ;

    comment "# go to the top level workspace path";
    text cd ~/deploy_ws/src;
    newline;

    comment "# run the deployer operations install";
    comment "# - you only need to run this command when there are changes to operations";
    comment "# - the maintainer will notify everyone when to re-run this command";
    text ./install-deployer.bash --install;
    newline;

    comment "# update ansible (LOCALHOST HOST)";
    text subt cloud ansible localhost install-localhost.yaml -p;
    newline;

    comment "# update ansible (BASESTATION HOST)";
    text subt cloud ansible basestation install-localhost.yaml -p;
    newline;
  }

# tutorial for general docker commands
- tutorial_docker_general() {
    newline ;
    title Tutorial - Docker General;
    newline ;

    subtitle General Docker Shell Commands;
    newline ;

    comment "# view running docker containers";
    text docker ps;
    newline ;

    comment "# view all docker containers (running or stopped)";
    text docker ps -a;
    newline ;

    comment "# view all docker images";
    text docker images;
    newline ;

    comment "# enter a docker container";
    text docker-join.bash -n [container name];
    newline ;
  }

# tutorial for starting the localhost docker network
- tutorial_docker_network () {
    newline ;
    title Tutorial - Docker Localhost Network;
    newline ;

    subtitle Create the localhost docker network;
    newline ;
    comment "# create the docker network ";
    text subt deployer local.docker.network.create;
    newline ;
    comment "# verify you have created the network";
    comment "# - you should see a network called 'robots'";
    text docker network ls;
    newline ;
    comment "# restart the docker daemon";
    text "sudo systemctl restart docker.service";
    newline ;

    subtitle Remove the localhost docker network;
    newline ;
    comment "# remove the docker network";
    text subt deployer local.docker.network.rm;
    newline ;
    comment "# verify you have remove the network";
    comment "# - you should not see a network called 'robots'";
    text docker network ls;
    newline ;
    comment "# restart the docker daemon";
    text sudo systemctl restart docker.service;
    newline ;
  }

# //////////////////////////////////////////////////////////////////////////////
# @brief General
# //////////////////////////////////////////////////////////////////////////////

- tutorial_registry () {
    local INFRASTRUCTURE=$1;
    local PLATFORM=$2;
    local ROBOT=$3;

    newline ;
    title Tutorial - Docker Registry;
    newline ;

    subtitle Build Docker Image on Azure Virtual Machines;
    newline ;
    comment "# builds the docker image";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.docker.make;
    newline ;

    subtitle Pull Docker Image From Azure Docker Registry;
    newline ;
    comment "# azure registry login";
    text az acr login --name subtexplore;
    newline ;
    comment "# pull all the docker images from the azure docker registry";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.docker.registry.azure.pull;
    newline ;

    subtitle Push Docker Image To Azure Docker Registry;
    newline ;
    comment "# azure registry login";
    text az acr login --name subtexplore;
    newline ;
    comment "# pull all the docker images from the $INFRASTRUCTURE docker registry";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.docker.registry.azure.push;
    newline ;
  }

- tutorial_shell () {
    local INFRASTRUCTURE=$1;
    local PLATFORM=$2;
    local ROBOT=$3;

    newline ;
    title Tutorial - Docker Shell;
    newline ;

    subtitle Docker Shell Commands;
    newline ;

    comment "# start all docker containers";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.docker.shell.start;
    newline ;

    comment "# stop all docker containers";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.docker.shell.stop;
    newline ;

    comment "# remove all docker containers";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.docker.shell.rm;
    newline ;

    comment "view running docker containers";
    text docker ps;
    newline ;
  }

- tutorial_sync () {
    local INFRASTRUCTURE=$1;
    local PLATFORM=$2;
    local ROBOT=$3;

    newline ;
    title Tutorial - Sync;
    newline;

    comment "# Transfer all localhost code to remote host";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.transfer.to;
    newline;

    comment "# Faster transfer, does not copy over the .git folders (so your git history will be incorrect on remote)";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.skel_t.to;
    newline;
  }

- tutorial_catkin () {
    local INFRASTRUCTURE=$1;
    local PLATFORM=$2;
    local ROBOT=$3;

    newline ;
    title Tutorial - Catkin;
    newline ;

    comment "# create the docker shell on the remote host";
    comment "#   - you need to make sure the container is started before building";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.docker.shell.start;
    newline ;

    comment "# clean the previously built workspaces";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.catkin.clean;
    newline ;

    comment "# catkin build the GUI workspaces";
    text subt deployer $INFRASTRUCTURE.$PLATFORM.$ROBOT.catkin.build;
    newline ;
  }

- tutorial_launch_remote() {
    local INFRASTRUCTURE=$1;
    local PLATFORM=$2;
    local ROBOT=$3;

    newline ;
    title Tutorial - Launch;
    newline ;

    comment "# ssh into the remote VM.";
    text ssh $INFRASTRUCTURE.$ROBOT;
    newline;

    comment "# view teamviewer info";
    text sudo teamviewer info;
    newline;

    comment "# enter the docker shell container (if not already joined)";
    text text docker-join.bash -n $ROBOT-shell;
    newline;

    comment "# load the tmux session";
    text ROBOT=$ROBOT tmuxp load ~/deploy_ws/src/subt_launch/tmux/simulation/$PLATFORM.yaml;
    newline ;
  }

- tutorial_launch_local() {
    local INFRASTRUCTURE=$1;
    local PLATFORM=$2;
    local ROBOT=$3;

    newline ;
    title Tutorial - Launch;
    newline ;

    comment "# enter the docker shell container (if not already joined)";
    text text docker-join.bash -n $ROBOT-shell;
    newline;

    comment "# load the tmux session";
    text ROBOT=$ROBOT tmuxp load ~/deploy_ws/src/subt_launch/tmux/simulation/$PLATFORM.yaml;
    newline ;
  }

- tutorial_ansible_remote() {
    local INFRASTRUCTURE=$1;
    local PLATFORM=$2;
    local ROBOT=$3;

    newline ;
    title Tutorial - Ansible;
    newline ;

    comment "# Verify VM Access";
    text ping -c 3 $INFRASTRUCTURE-$ROBOT;
    newline;

    comment "# Add $INFRASTRUCTURE-$ROBOT to the list of known hosts, accept when asked 'are you sure you want to continue connecting'";
    text ssh $INFRASTRUCTURE.$ROBOT;
    text exit;
    newline;

    comment "# Install basic dependencies on the remote VM (system, docker, docker tools)";
    comment "# - clones the deploy repo on the remote VM (can take 30 minutes)";
    comment "# - you do not need to clone the repo on the remote VM manually, this command will do that for you.";
    text subt cloud ansible $INFRASTRUCTURE-$ROBOT install-$INFRASTRUCTURE.yaml;
    newline;
  }

# //////////////////////////////////////////////////////////////////////////////
# @brief Basestation
# //////////////////////////////////////////////////////////////////////////////

- tutorial_basestation_sync () {
    newline ;
    title Tutorial - Sync;
    newline;

    comment "# Transfer all localhost code to remote host";
    text subt deployer basestation.transfer.to;
    newline;

    comment "# Faster transfer, does not copy over the .git folders (so your git history will be incorrect on remote)";
    text subt deployer basestation.skel_t.to;
    newline;
  }

- tutorial_basestation_registry () {
    local INFRASTRUCTURE=$1;

    newline ;
    title Tutorial - Docker Registry;
    newline ;

    subtitle Build Docker Image on Azure Virtual Machines;
    newline ;
    comment "# builds the basestation docker image";
    text subt deployer $INFRASTRUCTURE.basestation.docker.make;
    newline ;

    subtitle Pull Docker Image From Azure Docker Registry;
    newline ;
    comment "# azure registry login";
    text az acr login --name subtexplore;
    newline ;
    comment "# pull all the docker images from the azure docker registry";
    text subt deployer $INFRASTRUCTURE.basestation.docker.registry.azure.pull;
    newline ;

    subtitle Push Docker Image To Azure Docker Registry;
    newline ;
    comment "# azure registry login";
    text az acr login --name subtexplore;
    newline ;
    comment "# pull all the docker images from the $INFRASTRUCTURE docker registry";
    text subt deployer $INFRASTRUCTURE.basestation.docker.registry.azure.push;
    newline ;
  }

- tutorial_basestation_shell () {
    local INFRASTRUCTURE=$1;

    newline ;
    title Tutorial - Docker Shell;
    newline ;

    subtitle Basestation Docker Shell Commands;
    newline ;

    comment "# start any basestation docker containers";
    text subt deployer $INFRASTRUCTURE.basestation.docker.shell.start;
    newline ;

    comment "# stop any basestation docker containers";
    text subt deployer $INFRASTRUCTURE.basestation.docker.shell.stop;
    newline ;

    comment "# remove any basestation docker containers";
    text subt deployer $INFRASTRUCTURE.basestation.docker.shell.rm;
    newline ;

    comment "view running docker containers";
    text docker ps;
    newline ;
  }

- tutorial_basestation_catkin () {
    local INFRASTRUCTURE=$1;

    newline ;
    title Tutorial - Catkin;
    newline ;

    comment "# create the docker shell on the remote host";
    comment "#   - you need to make sure the container is started before building";
    text subt deployer $INFRASTRUCTURE.basestation.docker.shell.start;
    newline ;

    comment "# clean the previously built workspaces";
    text subt deployer $INFRASTRUCTURE.basestation.catkin.clean;
    newline ;

    comment "# catkin build the basestation GUI workspaces";
    text subt deployer $INFRASTRUCTURE.basestation.catkin.build;
    newline ;
  }
