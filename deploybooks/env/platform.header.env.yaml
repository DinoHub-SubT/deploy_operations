# export post-deployer actions: get the latest git lfs files
- set_docker_context () {
    if [ ${INFRASTRUCTURE_SYSTEM} = "local" ]; then
      export DCTX=default;

    elif [ ${INFRASTRUCTURE_SYSTEM} = "azure" ]; then
      export DCTX=$INFRASTRUCTURE_SYSTEM-$ROBOT;

    elif [ ${INFRASTRUCTURE_SYSTEM} = "robot" ]; then
      if [ ${PLATFORM} = "uav" ]; then
        export DCTX=robot-uav-$UAV_COMPUTER;
      else
        export DCTX=robot-$ROBOT-$ROBOT_COMPUTER;
      fi

    else
      echo "setting the docker context failed.";
    fi;

    echo $DCTX;
  }

# setup the configurations for a 'robot ugv', for the robot computer split
- set_scenarios_configuration() {
    if [ ${INFRASTRUCTURE_SYSTEM} = "robot" ]; then
      export SCENARIOS_PLATFORM=${PLATFORM}.${ROBOT_COMPUTER};
    else
      export SCENARIOS_PLATFORM=${PLATFORM};
    fi;
    echo "SCENARIOS PLATFORM is - ${SCENARIOS_PLATFORM}";
  }

# setup the docker compose service to be used (i.e. robot or localhost or simulation - workspace services )
- set_docker_compose_service() {
    if [ ${INFRASTRUCTURE_SYSTEM} = "local" ]; then
      export DOCKER_COMPOSE_SERVICE=${ROBOT}-${SERVICE};

    elif [ ${INFRASTRUCTURE_SYSTEM} = "azure" ]; then
      export DOCKER_COMPOSE_SERVICE=${PLATFORM}-${SERVICE}

    elif [ ${INFRASTRUCTURE_SYSTEM} = "robot" ]; then
      export DOCKER_COMPOSE_SERVICE=${SCENARIOS_PLATFORM}-${SERVICE}

    else
      echo "setting the docker context failed.";
    fi;
    echo "DOCKER COMPOSE SERVICE is - ${DOCKER_COMPOSE_SERVICE}";
  }

# Expected variables to be set before import...
#   SERVICE:       scenario group, example: ppc, nuc, core, perception
#   ROBOT:          specific robot, example: ugv1, ds1
#   PLATFORM:       type of robot platform, example: uav, ugv, basestation
#   INFRA:          infrastructure type, example: local, azure, robot
# Configurations:
# - setup the docker image name (used in the scenario source, found in extended actions file)
# - setup the base image for uav core simulation
# - extend robot actions
- set_workspace_configuration() {
    export DOCKER_COMPOSE_IMAGE_SHORT_NAME=${SERVICE};

    export DOCKER_BASE_IMAGE_PROJECT=${SCENARIOS_PLATFORM};

    echo "we are here?";
    source $SUBT_OPERATIONS_PATH/scenarios/systems/${INFRASTRUCTURE_SYSTEM}/${SCENARIOS_PLATFORM}.env ${ROBOT};
  }
