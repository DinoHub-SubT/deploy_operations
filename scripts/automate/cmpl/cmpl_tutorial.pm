#!/usr/local/bin/perl

package cmpl_tutorial;
use Exporter;
use FindBin;
use cmpl_utils;
use cmpl_help;
use Env;

# //////////////////////////////////////////////////////////////////////////////
# @brief export modules
# //////////////////////////////////////////////////////////////////////////////

our @ISA= qw( Exporter );

# these CAN be exported.
our @EXPORT_OK = qw(
  @_tutorial
  @_tutorial_help
);

# these are exported by default.
our @EXPORT = qw(
  @_tutorial
  @_tutorial_help
);

our (
  @_tutorial,
  @_tutorial_help
);

# read the tutorial's cli matches (autogenerated by install-deployer.bash)
@_tutorial = openfile("tutorial.cmpl");

# //////////////////////////////////////////////////////////////////////////////
# @brief various help messages
# //////////////////////////////////////////////////////////////////////////////

# @brief assign help keys to usage messages as hashmap -- hack: convert array to hashmap
# - TODO: update this matcher, to use better regex patterns...
@_tutorial_help = ({
  id      => "tutorial",
  help    => create_help(get_tutorial(qw(local azure robots operations))),

# -- local --
},{
  id      => "local",
  help    => create_help(get_tutorial(qw(
    basestation ugv_ugv1 ugv_ugv2 ugv_ugv3 uav_uav1 uav_uav2 uav_uav3 uav_uav4))),

},{
  id      => "local.uav",
  help    => create_help(get_tutorial(qw(uav_uav1 uav_uav2 uav_uav3 uav_uav4))),

},{
  id      => "local.ugv",
  help    => create_help(get_tutorial(qw(
    basestation ugv_ugv1 ugv_ugv2 ugv_ugv3))),

# -- azure --
},{
  id      => "azure",
  help    => create_help(get_tutorial(qw(
    basestation ugv_ugv1 ugv_ugv2 ugv_ugv3 uav_uav1 uav_uav2 uav_uav3 uav_uav4))),

},{
  id      => "azure.uav",
  help    => create_help(get_tutorial(qw(uav_uav1 uav_uav2 uav_uav3 uav_uav4))),

},{
  id      => "azure.ugv",
  help    => create_help(get_tutorial(qw(ugv_ugv1 ugv_ugv2 ugv_ugv3))),

# -- robots --
},{
  id      => "robots",
  help    => create_help(get_tutorial(qw(
    basestation
    ugv_ugv1_ppc ugv_ugv2_ppc ugv_ugv3_ppc
    ugv_ugv1_nuc ugv_ugv2_nuc ugv_ugv3_nuc
    ugv_ugv1_xavier ugv_ugv2_xavier ugv_ugv3_xavier
    uav_ds1 uav_ds2 uav_ds3 uav_ds4))),

# -- ugv --

},{
  id      => "robots.ugv",
  help    => create_help(get_tutorial(qw(
    ugv_ugv1_ppc ugv_ugv2_ppc ugv_ugv3_ppc
    ugv_ugv1_nuc ugv_ugv2_nuc ugv_ugv3_nuc
    ugv_ugv1_xavier ugv_ugv2_xavier ugv_ugv3_xavier))),

},{
  id      => "robots.ugv.ugv1",
  help    => create_help(get_tutorial(qw(ugv_ugv1_ppc ugv_ugv1_nuc ugv_ugv1_xavier))),

},{
  id      => "robots.ugv.ugv2",
  help    => create_help(get_tutorial(qw(ugv_ugv2_ppc ugv_ugv2_nuc ugv_ugv2_xavier))),

},{
  id      => "robots.ugv.ugv3",
  help    => create_help(get_tutorial(qw(ugv_ugv3_ppc ugv_ugv3_nuc ugv_ugv3_xavier))),

# -- uav --
},{
  id      => "robots.uav",
  help    => create_help(get_tutorial(qw(uav_ds1 uav_ds2 uav_ds3 uav_ds4))),

},{
  id      => "robots.uav.ds1",
  help    => create_help(get_tutorial(qw(uav_ds1 uav_ds2 uav_ds3 uav_ds4))),

},{
  id      => "robots.uav.ds2",
  help    => create_help(get_tutorial(qw(uav_ds1 uav_ds2 uav_ds3 uav_ds4))),

},{
  id      => "robots.uav.ds3",
  help    => create_help(get_tutorial(qw(uav_ds1 uav_ds2 uav_ds3 uav_ds4))),

},{
  id      => "robots.uav.ds4",
  help    => create_help(get_tutorial(qw(uav_ds1 uav_ds2 uav_ds3 uav_ds4))),

# -- general --

},{
  id      => "basestation",
  help    => create_help(get_tutorial(qw(basestation))),

});

