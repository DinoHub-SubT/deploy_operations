#!/usr/bin/env bash

# load header helper functions
. "$SUBT_PATH/operations/scripts/header.sh"
. "$SUBT_PATH/operations/scripts/automate/cmpl/completion.bash"

# //////////////////////////////////////////////////////////////////////////////
# @brief some pre-defined shell env configuration settings
# //////////////////////////////////////////////////////////////////////////////
if [ ! -z "$ZSH_NAME" ]; then
  # bash-completion under zsh
  autoload bashcompinit
  bashcompinit

  autoload -Uz compinit
  compinit

  # remove fuzzy search in zsh-completion
  zstyle ":completion:*" matcher-list ''
fi

# //////////////////////////////////////////////////////////////////////////////
# @brief evaluate which subcommand to switch and execute
# //////////////////////////////////////////////////////////////////////////////
__subt_git_execute() {
  # get the given git action command
  local _git_action_cmd=${@}
  # apply the general git action scripts
  if chk_flag status $@ || chk_flag sync $@  || chk_flag add $@; then
    shift 1
    ($GL_BIN_AUTOMATE_DIR/cmpl/git.bash $@)
  elif chk_flag help $@; then
    __git_help
  # apply the deployer action scripts
  else
    deployer -s "$@"
  fi
}

# //////////////////////////////////////////////////////////////////////////////
# @brief evaluate which subcommand to switch and execute
# //////////////////////////////////////////////////////////////////////////////
__subt_robots_execute() {
  # terraform azure setup
  if chk_flag terraform $@; then
    shift 2 # shift the 'cloud terraform' tokens

    # go through all terraform files, check if filename suffix is a given arguments
    for filename in $SUBT_OPERATIONS_PATH/azurebooks/scripts/*.sh; do
      # get the type of terraform script call (find script by filename suffix)
      filename=$(basename $filename)
      filename="${filename%.*}"
      suffix="${filename##*_}"
      # execute the terraform script if script found in input
      if chk_flag $suffix $@; then
        (subtf_${1}.sh ${@:2})
      fi
    done
  fi
}

# //////////////////////////////////////////////////////////////////////////////
# @brief evaluate which subcommand to switch and execute
# //////////////////////////////////////////////////////////////////////////////
__subt_cloud_execute() {
  # ansible azure install
  if chk_flag ansible $@; then
    shift 1 # shift the 'ansible'
    (subtani_install.sh $@)
  # terraform azure setup
  elif chk_flag terraform $@; then
    shift 1 # shift the 'cloud terraform' tokens

    # go through all terraform files, check if filename suffix is a given arguments
    for filename in $SUBT_OPERATIONS_PATH/azurebooks/scripts/*.sh; do
      # get the type of terraform script call (find script by filename suffix)
      filename=$(basename $filename)
      filename="${filename%.*}"
      suffix="${filename##*_}"
      # execute the terraform script if script found in input
      if chk_flag $suffix $@; then
        (subtf_${1}.sh ${@:2})
      fi
    done
  fi
}

# //////////////////////////////////////////////////////////////////////////////
# @brief evaluate which subcommand to switch and execute
# //////////////////////////////////////////////////////////////////////////////
__subt_tools_execute() {

  if chk_flag probe.ssh $@; then
    shift 1
    (probe_ssh_connections.sh $@)

  elif chk_flag probe.teamviewer $@; then
    shift 1
    (probe_teamviewer.sh $@)

  elif chk_flag snapshot $@; then
    shift 1
    (snapshot.sh $@)

  elif chk_flag rdp $@; then
    shift 1
    (azure_rdp.sh $@)

  elif chk_flag verify.ops $@; then
    shift 1
    (verify_ops_tools.sh $@)

  else
    echo "Error: Please enter a valid tools command."
  fi
}

# //////////////////////////////////////////////////////////////////////////////
# @brief 'git subt' wrapper entrypoint
# //////////////////////////////////////////////////////////////////////////////
subt() {
  # get the current directory
  local __pwd=$(pwd)

  # execute any deployer's git books (section given as user input)
  if chk_nth_flag 1 "deployer" "$@"; then
    shift 1 # shift 'deployer'
    deployer -s $@

  # # execute any deployer's git books (section given as user input)
  elif chk_nth_flag 1 "tools" "$@"; then
    shift 1 # shift 'tools'
    __subt_tools_execute $@

  # execute actual git command (filter any 'git subt' subcommands)
  elif chk_nth_flag 1 "git" "$@"; then
    shift 1 # shift git
    __subt_git_execute $@

  elif chk_nth_flag 1 "cloud" "$@"; then
    shift 1 # shift git
    __subt_cloud_execute $@

  # execute any deployer's git books (section given as user input)
  elif chk_nth_flag 1 "tutorial" "$@"; then
    shift 1 # shift 'deployer'

    # addon any preview or verbose commands
    local opts=""
    if chk_flag -p $@; then
      opts+="-p"
    fi

    if chk_flag -v $@; then
      opts+=" -v"
    fi

    # go through all the given tutorial commands
    for tut in "${@}"; do
      # ignore any preview or verbose commands
      if [[ $tut == "-p" || $tut == "-v" ]]; then
        continue;
      fi
      # evaluate the deployer command
      cmd="deployer -s tutorial.$tut $opts"
      eval $cmd
    done

  elif chk_nth_flag 1 "help" "$@"; then
    subt_help
  fi

  # return to path of call
  cd $__pwd
}

# //////////////////////////////////////////////////////////////////////////////
# enable tab autocompletion
# 'nosort' option does not work with bash <= 4.4.20 (https://lists.defectivebydesign.org/archive/html/bug-bash/2017-05/msg00034.html)
# //////////////////////////////////////////////////////////////////////////////
complete -o nospace -o nosort -F _ac_subt_completion subt
