---
# ////////////////////////////////////////////////////////////////////////
# install & setup ROS packages
# ////////////////////////////////////////////////////////////////////////
- name: ros install setup

  # setup variables to be shared in tasks
  vars_files:
    - ../vars/main.yaml
    - "{{ lookup('env','SUBT_CONFIGURATION_PATH') }}/ansible_config.yaml"

  # setup hosts to run commands as
  hosts:
    - laptop
    - basestation
    - ugv
    - spot
    - uav
    - perception
  become_method: sudo
  become_user: root

  # ////////////////////////////////////////////////////////////////////////
  # Tasks to execute
  # ////////////////////////////////////////////////////////////////////////
  tasks:

    # ////////////////////////////////////////////////////////////////////////
    # Install Base Packages
    # ////////////////////////////////////////////////////////////////////////
    - name: update apt packages
      become: true
      apt:
        force: yes          # force yes
        force_apt_get: yes
        install_recommends: yes
        update_cache: yes   # force apt-get update
      when: ros_install

    - command: lsb_release -sc
      register: ubuntu_distro
    - debug: msg="ubuntu distro is {{ubuntu_distro.stdout}}"
      when: ros_install

    - name: setup {{ ros_version }} keys
      shell: echo "deb http://packages.ros.org/ros/ubuntu {{ubuntu_distro.stdout}} main" > /etc/apt/sources.list.d/ros-latest.list
      become: true
      when: ros_install

    - name: setup {{ ros_version }} apt keys
      shell: "curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -"
      become: true
      when: ros_install

    - name: update {{ ros_version }} apt packages
      become: true
      apt:
        force: yes          # force yes
        force_apt_get: yes
        install_recommends: yes
        update_cache: yes   # force apt-get update
      when: ros_install

    - name: install ros {{ ros_version }} prerequisite packages
      become: true
      apt:
        name: "{{ ros[ros_version].packages.prereq }}"
        state: present
        force: yes          # force yes
        force_apt_get: yes
        install_recommends: yes
        update_cache: yes   # force apt-get update
      when: ros_install

    - name: ros {{ ros_version }} desktop full install
      apt:
        name: "ros-{{ ros_version }}-desktop-full"
        update_cache: yes
      become: true
      when: ros_install

    - name: install ros {{ ros_version }} extra packages
      become: true
      apt:
        name: "{{ ros[ros_version].packages.extra }}"
        state: present
        force: yes          # force yes
        force_apt_get: yes
        install_recommends: yes
        update_cache: yes   # force apt-get update
      when: ros_install

    # remove previous file
    - name: Remove Previously Added Bitbucket SSH Keys
      become: true
      file:
        path: /etc/ros/rosdep/sources.list.d/20-default.list
        state: absent
      when: ros_install

    - name: rosdep {{ ros_version }} initialize
      command: rosdep init
      become: true
      when: ros_install

    - name: rosdep {{ ros_version }} update
      command: rosdep update
      when: ros_install

    - name: bash ros {{ ros_version }} environment setup
      lineinfile: dest={{ item.file }} state=present line={{ item.line }}
      with_items:
        - { line: 'source /opt/ros/{{ ros_version }}/setup.bash', file: "/home/{{ lookup('env', 'USER') }}/.bashrc" }
      when: ros_install

    - name: check that zshrc exists
      stat:
        path: /home/{{ lookup('env', 'USER') }}/.zshrc
      register: stat_result
      when: >
        inventory_hostname is not match("azure-*")

    - name: zsh ros {{ ros_version }} environment setup
      lineinfile: dest={{ item.file }} state=present line={{ item.line }}
      with_items:
        - { line: 'source /opt/ros/{{ ros_version }}/setup.zsh', file: "/home/{{ lookup('env', 'USER') }}/.zshrc" }
      when:
        ros_install and stat_result.stat.exists and
        inventory_hostname is not match("azure-*")
